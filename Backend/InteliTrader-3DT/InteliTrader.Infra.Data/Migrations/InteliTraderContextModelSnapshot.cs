// <auto-generated />
using System;
using InteliTrader.Infra.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InteliTrader.Infra.Data.Migrations
{
    [DbContext(typeof(InteliTraderContext))]
    partial class InteliTraderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("InteliTrader.Dominio.Entidades.Candidato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Funcao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<Guid>("IdVaga")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Personalidade")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdVaga");

                    b.ToTable("Candidatos");
                });

            modelBuilder.Entity("InteliTrader.Dominio.Entidades.TesteTecnico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TesteTecnicos");
                });

            modelBuilder.Entity("InteliTrader.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("VARCHAR(16)");

                    b.Property<string>("Cursando")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Instituicao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("OndeTrabalha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("VARCHAR(13)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("VARCHAR(16)");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Trabalho")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("InteliTrader.Dominio.Entidades.Vaga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeVaga")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<int>("SituacaoVaga")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NomeVaga")
                        .IsUnique();

                    b.ToTable("Vagas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df93ade3-6d8a-4187-b61c-66a0a461c6ba"),
                            DataCriacao = new DateTime(2021, 12, 2, 14, 37, 8, 101, DateTimeKind.Local).AddTicks(4049),
                            Descricao = "Estágio para BackEnd Exigindo conhecimento em : C#, .NET, ASP.NETCORE,Manipulação de API REST",
                            NomeVaga = "Vaga Estágio Back-End",
                            SituacaoVaga = 1
                        },
                        new
                        {
                            Id = new Guid("4d40421a-a379-425f-b68d-a10f6d6766fb"),
                            DataCriacao = new DateTime(2021, 12, 2, 14, 37, 8, 119, DateTimeKind.Local).AddTicks(4030),
                            Descricao = "Vaga para FrontEnd Junior Exigindo conhecimento em : HTML, CSS,JavaScript",
                            NomeVaga = "Vaga Dev Junior Front End",
                            SituacaoVaga = 1
                        },
                        new
                        {
                            Id = new Guid("cb5e0bfd-c1a3-4e04-93fc-954dc5bac788"),
                            DataCriacao = new DateTime(2021, 12, 2, 14, 37, 8, 119, DateTimeKind.Local).AddTicks(4100),
                            Descricao = "Vaga para BackEnd Sênior Exigindo conhecimento em : PYTHON, Criação e Manipulação de API REST,node.js",
                            NomeVaga = "Vaga Dev Sênior Back End",
                            SituacaoVaga = 1
                        });
                });

            modelBuilder.Entity("InteliTrader.Dominio.Entidades.Candidato", b =>
                {
                    b.HasOne("InteliTrader.Dominio.Entidades.Vaga", "Vaga")
                        .WithMany("Candidatos")
                        .HasForeignKey("IdVaga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("InteliTrader.Dominio.Entidades.Vaga", b =>
                {
                    b.Navigation("Candidatos");
                });
#pragma warning restore 612, 618
        }
    }
}
