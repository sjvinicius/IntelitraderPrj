// <auto-generated />
using System;
using InteliTrader.Infra.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InteliTrader.Infra.Data.Migrations
{
    [DbContext(typeof(InteliTraderContext))]
    [Migration("20211208181851_IntelitraderDatabase")]
    partial class IntelitraderDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("InteliTrader.Dominio.Entidades.Candidato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnoFim")
                        .HasMaxLength(16)
                        .HasColumnType("VARCHAR(16)");

                    b.Property<string>("AnoInicio")
                        .HasMaxLength(16)
                        .HasColumnType("VARCHAR(16)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Curso")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Empresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdVaga")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InformacoesComplementares")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)");

                    b.Property<string>("Instituicao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<int>("Situacao")
                        .HasColumnType("int");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CPF")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdVaga");

                    b.ToTable("Candidatos");
                });

            modelBuilder.Entity("InteliTrader.Dominio.Entidades.TesteTecnico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TesteTecnicos");
                });

            modelBuilder.Entity("InteliTrader.Dominio.Entidades.UsuarioLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("InteliTrader.Dominio.Entidades.Vaga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeVaga")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(200)");

                    b.Property<int>("SituacaoVaga")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NomeVaga")
                        .IsUnique();

                    b.ToTable("Vaga");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0099b32-d96f-49c0-81ba-e3d61ac4719b"),
                            DataCriacao = new DateTime(2021, 12, 8, 15, 18, 51, 39, DateTimeKind.Local).AddTicks(3238),
                            Descricao = "Estágio para BackEnd Exigindo conhecimento em : C#, .NET, ASP.NETCORE,Manipulação de API REST",
                            NomeVaga = "Vaga Estágio Back-End",
                            SituacaoVaga = 1
                        },
                        new
                        {
                            Id = new Guid("67e0f3f8-be3f-4ebc-bb5b-888577476dc8"),
                            DataCriacao = new DateTime(2021, 12, 8, 15, 18, 51, 42, DateTimeKind.Local).AddTicks(4181),
                            Descricao = "Vaga para FrontEnd Junior Exigindo conhecimento em : HTML, CSS,JavaScript",
                            NomeVaga = "Vaga Dev Junior Front End",
                            SituacaoVaga = 1
                        },
                        new
                        {
                            Id = new Guid("813f3e79-0d86-47ba-b1b7-ffccab32e137"),
                            DataCriacao = new DateTime(2021, 12, 8, 15, 18, 51, 42, DateTimeKind.Local).AddTicks(4241),
                            Descricao = "Vaga para BackEnd Sênior Exigindo conhecimento em : PYTHON, Criação e Manipulação de API REST,node.js",
                            NomeVaga = "Vaga Dev Sênior Back End",
                            SituacaoVaga = 1
                        });
                });

            modelBuilder.Entity("InteliTrader.Dominio.Entidades.Candidato", b =>
                {
                    b.HasOne("InteliTrader.Dominio.Entidades.Vaga", "Vaga")
                        .WithMany("Candidatos")
                        .HasForeignKey("IdVaga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("InteliTrader.Dominio.Entidades.Vaga", b =>
                {
                    b.Navigation("Candidatos");
                });
#pragma warning restore 612, 618
        }
    }
}
